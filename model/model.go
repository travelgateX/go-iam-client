// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type AdminQuery struct {
	Query Query `json:"admin"`
}

type AdminMutation struct {
	Mutation Mutation `json:"admin"`
}

type GroupCommonData interface {
	IsGroupCommonData()
}

type Node interface {
	IsNode()
}

type SearchResultItemConnection interface {
	IsSearchResultItemConnection()
}

type Test1 interface {
	IsTest1()
}

type API struct {
	Code          string          `json:"code"`
	Error         []Error         `json:"error"`
	AdviseMessage []AdviseMessage `json:"adviseMessage"`
	APIData       APIData         `json:"apiData"`
	CreatedAt     string          `json:"createdAt"`
	UpdatedAt     string          `json:"updatedAt"`
}

func (API) IsNode() {}

type APIConnection struct {
	Edges    []APIEdge `json:"edges"`
	PageInfo PageInfo  `json:"pageInfo"`
}

type APIData struct {
	ID         string              `json:"id"`
	Code       string              `json:"code"`
	IsEditable bool                `json:"isEditable"`
	Label      string              `json:"label"`
	Groups     GroupConnection     `json:"groups"`
	Resources  ResourceConnection  `json:"resources"`
	Operations OperationConnection `json:"operations"`
}

type APIEdge struct {
	Node   API    `json:"node"`
	Cursor string `json:"cursor"`
}

type Access struct {
	Code          string          `json:"code"`
	AccessData    AccessData      `json:"accessData"`
	Error         []Error         `json:"error"`
	AdviseMessage []AdviseMessage `json:"adviseMessage"`
	CreatedAt     string          `json:"createdAt"`
	UpdatedAt     string          `json:"updatedAt"`
}

func (Access) IsNode() {}

type AccessConnection struct {
	Edges    []AccessEdge `json:"edges"`
	PageInfo PageInfo     `json:"pageInfo"`
}

type AccessData struct {
	Name       string          `json:"name"`
	IsActive   bool            `json:"isActive"`
	Code       string          `json:"code"`
	Supplier   Supplier        `json:"supplier"`
	IsTest     bool            `json:"isTest"`
	User       string          `json:"user"`
	Password   string          `json:"password"`
	Urls       Urls            `json:"urls"`
	Parameters []Parameter     `json:"parameters"`
	Markets    []string        `json:"markets"`
	RateRules  []RateRulesType `json:"rateRules"`
	// Shared     Access          `json:"shared"`  // todo: invalid recursive type Access error
	Owner Organization `json:"owner"`
}

type AccessEdge struct {
	Node   Access `json:"node"`
	Cursor string `json:"cursor"`
}

type AdminDataInput struct {
	Group        string   `json:"group"`
	Organization string   `json:"organization"`
	API          string   `json:"api"`
	Resources    []string `json:"resources"`
	Role         string   `json:"role"`
}

type Mutation struct {
	CreateOrganization       Organization `json:"createOrganization"`
	SuitOrganization         Organization `json:"suitOrganization"`
	CreateProduct            Product      `json:"createProduct"`
	CreateMember             Member       `json:"createMember"`
	CreateGroup              Group        `json:"createGroup"`
	CreateAPI                API          `json:"createApi"`
	CreateResource           Resource     `json:"createResource"`
	CreateRole               Role         `json:"createRole"`
	UpdateOrganization       Organization `json:"updateOrganization"`
	ResetMemberPassword      Member       `json:"resetMemberPassword"`
	UpdateProduct            Product      `json:"updateProduct"`
	UpdateMember             Member       `json:"updateMember"`
	UpdateGroup              Group        `json:"updateGroup"`
	GrantAPIToGroup          Group        `json:"grantApiToGroup"`
	RevokeAPIFromGroup       Group        `json:"revokeApiFromGroup"`
	UpdateGroupAdmin         Group        `json:"updateGroupAdmin"`
	DeleteOrganization       Organization `json:"deleteOrganization"`
	DeleteProduct            Product      `json:"deleteProduct"`
	DeleteMember             Member       `json:"deleteMember"`
	LockMember               Member       `json:"lockMember"`
	DeleteGroup              Group        `json:"deleteGroup"`
	DeleteAPI                API          `json:"deleteApi"`
	DeleteResource           Resource     `json:"deleteResource"`
	DeleteRole               Role         `json:"deleteRole"`
	RefreshToken             []Token      `json:"refreshToken"`
	MoveFolder               Group        `json:"moveFolder"`
	UpdateOrganizationDomain Organization `json:"updateOrganizationDomain"`
}

type Query struct {
	Organizations OrganizationConnection `json:"organizations"`
	Products      ProductConnection      `json:"products"`
	Members       MemberConnection       `json:"members"`
	Groups        GroupConnection        `json:"groups"`
	Apis          APIConnection          `json:"apis"`
	Resources     ResourceConnection     `json:"resources"`
	Roles         RoleConnection         `json:"roles"`
	Operations    OperationConnection    `json:"operations"`
}

type AdviseMessage struct {
	Code          string             `json:"code"`
	Description   string             `json:"description"`
	Level         AdviseMessageLevel `json:"level"`
	External      ExternalMessage    `json:"external"`
	CorrelationID string             `json:"correlationID"`
}

type Client struct {
	Code          string          `json:"code"`
	ClientData    ClientData      `json:"clientData"`
	Error         []Error         `json:"error"`
	AdviseMessage []AdviseMessage `json:"adviseMessage"`
	CreatedAt     string          `json:"createdAt"`
	UpdatedAt     string          `json:"updatedAt"`
}

func (Client) IsNode() {}

type ClientConnection struct {
	Edges    []ClientEdge `json:"edges"`
	PageInfo PageInfo     `json:"pageInfo"`
}

type ClientData struct {
	Code     string       `json:"code"`
	Name     string       `json:"name"`
	IsActive bool         `json:"isActive"`
	Owner    Organization `json:"owner"`
}

type ClientEdge struct {
	Node   Client `json:"node"`
	Cursor string `json:"cursor"`
}

type CreateAPIInput struct {
	API        string `json:"api"`
	Label      string `json:"label"`
	IsEditable bool   `json:"isEditable"`
}

type CreateGroupInput struct {
	Group    string         `json:"group"`
	Type     GroupTypeInput `json:"type"`
	Info     string         `json:"info"`
	Parent   string         `json:"parent"`
	Owner    string         `json:"owner"`
	Editable bool           `json:"editable"`
	Product  string         `json:"product"`
	Resource string         `json:"resource"`
	Template GroupTemplate  `json:"template"`
}

type CreateMemberInput struct {
	Member    string     `json:"member"`
	Info      string     `json:"info"`
	Type      MemberType `json:"type"`
	Group     string     `json:"group"`
	Role      string     `json:"role"`
	Resources []string   `json:"resources"`
}

type CreateOperationInput struct {
	Operation string        `json:"operation"`
	API       string        `json:"api"`
	Type      OperationType `json:"type"`
}

type CreateOrganizationInput struct {
	User         string               `json:"user"`
	Info         string               `json:"info"`
	Organization string               `json:"organization"`
	Template     OrganizationTemplate `json:"template"`
}

type CreateProductInput struct {
	Product string   `json:"product"`
	Apis    []string `json:"apis"`
}

type CreateResourceInput struct {
	Resource   string `json:"resource"`
	API        string `json:"api"`
	Label      string `json:"label"`
	IsEditable bool   `json:"isEditable"`
}

type CreateRoleInput struct {
	Role       string   `json:"role"`
	Resource   string   `json:"resource"`
	Label      string   `json:"label"`
	Permission string   `json:"permission"`
	Type       RoleType `json:"type"`
	IsEditable bool     `json:"isEditable"`
}

type DeleteAPIInput struct {
	Apis []string `json:"apis"`
}

type DeleteGroupInput struct {
	Group string `json:"group"`
}

type DeleteMemberInput struct {
	Member string `json:"member"`
	Group  string `json:"group"`
}

type DeleteOperationInput struct {
	Operation string `json:"operation"`
}

type DeleteOrganizationInput struct {
	Organization string `json:"organization"`
}

type DeleteProductInput struct {
	Products []string `json:"products"`
}

type DeleteResourceInput struct {
	Resources []string `json:"resources"`
}

type DeleteRoleInput struct {
	Role string `json:"role"`
}

type Domain struct {
	Code          string          `json:"code"`
	DomainData    DomainData      `json:"domainData"`
	Error         []Error         `json:"error"`
	AdviseMessage []AdviseMessage `json:"adviseMessage"`
	CreatedAt     string          `json:"createdAt"`
	UpdatedAt     string          `json:"updatedAt"`
}

func (Domain) IsNode() {}

type DomainData struct {
	ID           string       `json:"id"`
	Name         string       `json:"name"`
	Organization Organization `json:"organization"`
}

type Error struct {
	Code        string `json:"code"`
	Type        string `json:"type"`
	Description string `json:"description"`
}

type ExternalMessage struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

type Group struct {
	Code          string          `json:"code"`
	Error         []Error         `json:"error"`
	AdviseMessage []AdviseMessage `json:"adviseMessage"`
	GroupData     GroupData       `json:"groupData"`
	CreatedAt     string          `json:"createdAt"`
	UpdatedAt     string          `json:"updatedAt"`
}

func (Group) Istest1() {}
func (Group) IsNode()  {}

type GroupConnection struct {
	Edges    []GroupEdge `json:"edges"`
	PageInfo PageInfo    `json:"pageInfo"`
}

func (GroupConnection) IsSearchResultItemConnection() {}

type GroupData struct {
	ID    string    `json:"id"`
	Code  string    `json:"code"`
	Label string    `json:"label"`
	Type  GroupType `json:"type"`
	Info  string    `json:"info"`
	// Parent Group     `json:"parent"`
	Children      GroupConnection        `json:"children"`
	Descendents   GroupConnection        `json:"descendents"`
	Parents       GroupConnection        `json:"parents"`
	Owner         Member                 `json:"owner"`
	IsEditable    bool                   `json:"isEditable"`
	ProductID     int                    `json:"productId"`
	ResourceID    int                    `json:"resourceId"`
	Members       MemberConnection       `json:"members"`
	Apis          APIConnection          `json:"apis"`
	ManagedGroups ManagedGroupConnection `json:"managedGroups"`
	AllMembers    MemberConnection       `json:"allMembers"`
	Accesses      AccessConnection       `json:"accesses"`
	Suppliers     SupplierConnection     `json:"suppliers"`
	Clients       ClientConnection       `json:"clients"`
	Roles         RoleConnection         `json:"roles"`
}

func (GroupData) IsGroupCommonData() {}

type GroupEdge struct {
	Node   Group  `json:"node"`
	Cursor string `json:"cursor"`
}

type InputMemberData struct {
	Isuser bool   `json:"isuser"`
	Apikey string `json:"apikey"`
	JSON   string `json:"json"`
}

type Jwt struct {
	Token         string          `json:"token"`
	AdviseMessage []AdviseMessage `json:"adviseMessage"`
}

type LockMemberInput struct {
	Member string `json:"member"`
	Lock   bool   `json:"lock"`
}

type ManagedGroup struct {
	Code             string           `json:"code"`
	ManagedGroupData ManagedGroupData `json:"managedGroupData"`
	AdviseMessage    []AdviseMessage  `json:"adviseMessage"`
	CreatedAt        string           `json:"createdAt"`
	UpdatedAt        string           `json:"updatedAt"`
}

func (ManagedGroup) IsNode() {}

type ManagedGroupConnection struct {
	Edges    []ManagedGroupEdge `json:"edges"`
	PageInfo PageInfo           `json:"pageInfo"`
}

type ManagedGroupData struct {
	Code     string   `json:"code"`
	Group    Group    `json:"group"`
	API      API      `json:"api"`
	Resource Resource `json:"resource"`
	Role     Role     `json:"role"`
}

type ManagedGroupEdge struct {
	Node   ManagedGroup `json:"node"`
	Cursor string       `json:"cursor"`
}

type Member struct {
	Code          string          `json:"code"`
	MemberData    MemberData      `json:"memberData"`
	Error         []Error         `json:"error"`
	AdviseMessage []AdviseMessage `json:"adviseMessage"`
	CreatedAt     string          `json:"createdAt"`
	UpdatedAt     string          `json:"updatedAt"`
}

func (Member) Istest1() {}
func (Member) IsNode()  {}

type MemberConnection struct {
	Edges    []MemberEdge `json:"edges"`
	PageInfo PageInfo     `json:"pageInfo"`
}

type MemberData struct {
	ID               string          `json:"id"`
	Code             string          `json:"code"`
	Label            string          `json:"label"`
	Type             MemberType      `json:"type"`
	IsActive         bool            `json:"isActive"`
	IsLocked         bool            `json:"isLocked"`
	Groups           GroupConnection `json:"groups"`
	Roles            RoleConnection  `json:"roles"`
	ImpersonationJwt Jwt             `json:"impersonationJWT"`
}

type MemberEdge struct {
	Node   Member `json:"node"`
	Cursor string `json:"cursor"`
}

type MoveFolderInput struct {
	FolderCode string `json:"folderCode"`
	OrgCode    string `json:"orgCode"`
}

type Operation struct {
	Code          string          `json:"code"`
	Error         []Error         `json:"error"`
	AdviseMessage []AdviseMessage `json:"adviseMessage"`
	OperationData OperationData   `json:"operationData"`
	CreatedAt     string          `json:"createdAt"`
	UpdatedAt     string          `json:"updatedAt"`
}

func (Operation) IsNode() {}

type OperationConnection struct {
	Edges    []OperationEdge `json:"edges"`
	PageInfo PageInfo        `json:"pageInfo"`
}

type OperationData struct {
	ID    string          `json:"id"`
	Code  string          `json:"code"`
	Label string          `json:"label"`
	Types []OperationType `json:"types"`
	API   API             `json:"api"`
}

type OperationEdge struct {
	Node   Operation `json:"node"`
	Cursor string    `json:"cursor"`
}

type Organization struct {
	Code             string           `json:"code"`
	OrganizationData OrganizationData `json:"organizationData"`
	Error            []Error          `json:"error"`
	AdviseMessage    []AdviseMessage  `json:"adviseMessage"`
	CreatedAt        string           `json:"createdAt"`
	UpdatedAt        string           `json:"updatedAt"`
}

func (Organization) IsNode() {}

type OrganizationConnection struct {
	Edges    []OrganizationEdge `json:"edges"`
	PageInfo PageInfo           `json:"pageInfo"`
}

type OrganizationData struct {
	ID          string             `json:"id"`
	Code        string             `json:"code"`
	Label       string             `json:"label"`
	Type        GroupType          `json:"type"`
	Info        string             `json:"info"`
	Children    GroupConnection    `json:"children"`
	Descendents GroupConnection    `json:"descendents"`
	Owner       Member             `json:"owner"`
	IsEditable  bool               `json:"isEditable"`
	Members     MemberConnection   `json:"members"`
	Apis        APIConnection      `json:"apis"`
	Products    ProductConnection  `json:"products"`
	AllMembers  MemberConnection   `json:"allMembers"`
	Accesses    AccessConnection   `json:"accesses"`
	Suppliers   SupplierConnection `json:"suppliers"`
	Clients     ClientConnection   `json:"clients"`
	Domains     []Domain           `json:"domains"`
	Template    string             `json:"template"`
}

func (OrganizationData) IsGroupCommonData() {}

type OrganizationEdge struct {
	Node   Organization `json:"node"`
	Cursor string       `json:"cursor"`
}

type PageInfo struct {
	HasNextPage     bool   `json:"hasNextPage"`
	HasPreviousPage bool   `json:"hasPreviousPage"`
	StartCursor     string `json:"startCursor"`
	EndCursor       string `json:"endCursor"`
}

type Parameter struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type Product struct {
	Code          string          `json:"code"`
	ProductData   ProductData     `json:"productData"`
	Error         []Error         `json:"error"`
	AdviseMessage []AdviseMessage `json:"adviseMessage"`
	CreatedAt     string          `json:"createdAt"`
	UpdatedAt     string          `json:"updatedAt"`
}

func (Product) IsNode() {}

type ProductConnection struct {
	Edges    []ProductEdge `json:"edges"`
	PageInfo PageInfo      `json:"pageInfo"`
}

type ProductData struct {
	ID    string        `json:"id"`
	Code  string        `json:"code"`
	Label string        `json:"label"`
	Apis  APIConnection `json:"apis"`
}

type ProductEdge struct {
	Node   Product `json:"node"`
	Cursor string  `json:"cursor"`
}

type Provider struct {
	Code     string `json:"code"`
	Name     string `json:"name"`
	IsActive bool   `json:"isActive"`
	IsPublic bool   `json:"isPublic"`
}

type ResetMemberPasswordInput struct {
	Member string `json:"member"`
}

type Resource struct {
	Code          string          `json:"code"`
	Error         []Error         `json:"error"`
	AdviseMessage []AdviseMessage `json:"adviseMessage"`
	ResourceData  ResourceData    `json:"resourceData"`
	CreatedAt     string          `json:"createdAt"`
	UpdatedAt     string          `json:"updatedAt"`
}

func (Resource) IsNode() {}

type ResourceConnection struct {
	Edges    []ResourceEdge `json:"edges"`
	PageInfo PageInfo       `json:"pageInfo"`
}

type ResourceData struct {
	ID         string         `json:"id"`
	Code       string         `json:"code"`
	IsEditable bool           `json:"isEditable"`
	Label      string         `json:"label"`
	Apis       APIConnection  `json:"apis"`
	Roles      RoleConnection `json:"roles"`
}

type ResourceEdge struct {
	Node   Resource `json:"node"`
	Cursor string   `json:"cursor"`
}

type Role struct {
	Code          string          `json:"code"`
	Error         []Error         `json:"error"`
	AdviseMessage []AdviseMessage `json:"adviseMessage"`
	RoleData      RoleData        `json:"roleData"`
	CreatedAt     string          `json:"createdAt"`
	UpdatedAt     string          `json:"updatedAt"`
}

func (Role) IsNode() {}

type RoleConnection struct {
	Edges    []RoleEdge `json:"edges"`
	PageInfo PageInfo   `json:"pageInfo"`
}

type RoleData struct {
	ID           string             `json:"id"`
	Code         string             `json:"code"`
	Type         RoleType           `json:"type"`
	IsEditable   bool               `json:"isEditable"`
	Label        string             `json:"label"`
	IsCreate     bool               `json:"isCreate"`
	IsRead       bool               `json:"isRead"`
	IsUpdate     bool               `json:"isUpdate"`
	IsDelete     bool               `json:"isDelete"`
	IsEnable     bool               `json:"isEnable"`
	IsExecutable bool               `json:"isExecutable"`
	IsSpecial    bool               `json:"isSpecial"`
	Special      string             `json:"special"`
	Resources    ResourceConnection `json:"resources"`
}

type RoleEdge struct {
	Node   Role   `json:"node"`
	Cursor string `json:"cursor"`
}

type SuitOrganizationInput struct {
	User         string               `json:"user"`
	Organization string               `json:"organization"`
	Template     OrganizationTemplate `json:"template"`
}

type Supplier struct {
	Code          string          `json:"code"`
	SupplierData  SupplierData    `json:"supplierData"`
	Error         []Error         `json:"error"`
	AdviseMessage []AdviseMessage `json:"adviseMessage"`
	CreatedAt     string          `json:"createdAt"`
	UpdatedAt     string          `json:"updatedAt"`
}

func (Supplier) IsNode() {}

type SupplierConnection struct {
	Edges    []SupplierEdge `json:"edges"`
	PageInfo PageInfo       `json:"pageInfo"`
}

type SupplierData struct {
	Code          string           `json:"code"`
	Name          string           `json:"name"`
	IsActive      bool             `json:"isActive"`
	Provider      Provider         `json:"provider"`
	Context       string           `json:"context"`
	ServiceAPI    int              `json:"serviceApi"`
	SupplierGroup string           `json:"supplierGroup"`
	Accesses      AccessConnection `json:"accesses"`
	Owner         Organization     `json:"owner"`
}

type SupplierEdge struct {
	Node   Supplier `json:"node"`
	Cursor string   `json:"cursor"`
}

type Token struct {
	Code          string          `json:"code"`
	Error         []Error         `json:"error"`
	AdviseMessage []AdviseMessage `json:"adviseMessage"`
}

type UpdateGroupAPISinput struct {
	API   []string `json:"api"`
	Group string   `json:"group"`
}

type UpdateGroupInput struct {
	Group string         `json:"group"`
	Owner string         `json:"owner"`
	Type  GroupTypeInput `json:"type"`
	Info  string         `json:"info"`
	Label string         `json:"label"`
}

type UpdateMemberInput struct {
	Member    string   `json:"member"`
	Info      string   `json:"info"`
	Group     string   `json:"group"`
	Role      string   `json:"role"`
	Resources []string `json:"resources"`
	Method    Method   `json:"method"`
}

type UpdateOperationInput struct {
	Operation string `json:"operation"`
}

type UpdateOrganizationInput struct {
	API          string `json:"api"`
	Info         string `json:"info"`
	Organization string `json:"organization"`
	Method       Method `json:"method"`
}

type UpdateProductInput struct {
	Product string   `json:"product"`
	Apis    []string `json:"apis"`
	Method  Method   `json:"method"`
}

type Urls struct {
	Search  string `json:"search"`
	Quote   string `json:"quote"`
	Book    string `json:"book"`
	Generic string `json:"generic"`
}

type AdviseMessageLevel string

const (
	AdviseMessageLevelWarn  AdviseMessageLevel = "WARN"
	AdviseMessageLevelError AdviseMessageLevel = "ERROR"
	AdviseMessageLevelInfo  AdviseMessageLevel = "INFO"
)

var AllAdviseMessageLevel = []AdviseMessageLevel{
	AdviseMessageLevelWarn,
	AdviseMessageLevelError,
	AdviseMessageLevelInfo,
}

func (e AdviseMessageLevel) IsValid() bool {
	switch e {
	case AdviseMessageLevelWarn, AdviseMessageLevelError, AdviseMessageLevelInfo:
		return true
	}
	return false
}

func (e AdviseMessageLevel) String() string {
	return string(e)
}

func (e AdviseMessageLevel) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	e = AdviseMessageLevel(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AdviseMessageLevel", str)
	}
	return nil
}

func (e AdviseMessageLevel) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type GroupTemplate string

const (
	GroupTemplateFolderDefault GroupTemplate = "FOLDER_DEFAULT"
)

var AllGroupTemplate = []GroupTemplate{
	GroupTemplateFolderDefault,
}

func (e GroupTemplate) IsValid() bool {
	switch e {
	case GroupTemplateFolderDefault:
		return true
	}
	return false
}

func (e GroupTemplate) String() string {
	return string(e)
}

func (e GroupTemplate) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	e = GroupTemplate(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GroupTemplate", str)
	}
	return nil
}

func (e GroupTemplate) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type GroupType string

const (
	GroupTypeRoot             GroupType = "ROOT"
	GroupTypeOrg              GroupType = "ORG"
	GroupTypeGroup            GroupType = "GROUP"
	GroupTypeProfile          GroupType = "PROFILE"
	GroupTypeTeam             GroupType = "TEAM"
	GroupTypeFolder           GroupType = "FOLDER"
	GroupTypeProduct          GroupType = "PRODUCT"
	GroupTypeResource         GroupType = "RESOURCE"
	GroupTypeSpecificResource GroupType = "SPECIFIC_RESOURCE"
)

var AllGroupType = []GroupType{
	GroupTypeRoot,
	GroupTypeOrg,
	GroupTypeGroup,
	GroupTypeProfile,
	GroupTypeTeam,
	GroupTypeFolder,
	GroupTypeProduct,
	GroupTypeResource,
	GroupTypeSpecificResource,
}

func (e GroupType) IsValid() bool {
	switch e {
	case GroupTypeRoot, GroupTypeOrg, GroupTypeGroup, GroupTypeProfile, GroupTypeTeam, GroupTypeFolder, GroupTypeProduct, GroupTypeResource, GroupTypeSpecificResource:
		return true
	}
	return false
}

func (e GroupType) String() string {
	return string(e)
}

func (e GroupType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	e = GroupType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GroupType", str)
	}
	return nil
}

func (e GroupType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type GroupTypeInput string

const (
	GroupTypeInputRoot             GroupTypeInput = "ROOT"
	GroupTypeInputOrg              GroupTypeInput = "ORG"
	GroupTypeInputGroup            GroupTypeInput = "GROUP"
	GroupTypeInputProfile          GroupTypeInput = "PROFILE"
	GroupTypeInputTeam             GroupTypeInput = "TEAM"
	GroupTypeInputFolder           GroupTypeInput = "FOLDER"
	GroupTypeInputProduct          GroupTypeInput = "PRODUCT"
	GroupTypeInputResource         GroupTypeInput = "RESOURCE"
	GroupTypeInputSpecificResource GroupTypeInput = "SPECIFIC_RESOURCE"
)

var AllGroupTypeInput = []GroupTypeInput{
	GroupTypeInputRoot,
	GroupTypeInputOrg,
	GroupTypeInputGroup,
	GroupTypeInputProfile,
	GroupTypeInputTeam,
	GroupTypeInputFolder,
	GroupTypeInputProduct,
	GroupTypeInputResource,
	GroupTypeInputSpecificResource,
}

func (e GroupTypeInput) IsValid() bool {
	switch e {
	case GroupTypeInputRoot, GroupTypeInputOrg, GroupTypeInputGroup, GroupTypeInputProfile, GroupTypeInputTeam, GroupTypeInputFolder, GroupTypeInputProduct, GroupTypeInputResource, GroupTypeInputSpecificResource:
		return true
	}
	return false
}

func (e GroupTypeInput) String() string {
	return string(e)
}

func (e GroupTypeInput) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	e = GroupTypeInput(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GroupTypeInput", str)
	}
	return nil
}

func (e GroupTypeInput) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MemberType string

const (
	MemberTypeUser           MemberType = "USER"
	MemberTypeServiceAccount MemberType = "SERVICE_ACCOUNT"
)

var AllMemberType = []MemberType{
	MemberTypeUser,
	MemberTypeServiceAccount,
}

func (e MemberType) IsValid() bool {
	switch e {
	case MemberTypeUser, MemberTypeServiceAccount:
		return true
	}
	return false
}

func (e MemberType) String() string {
	return string(e)
}

func (e MemberType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	e = MemberType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MemberType", str)
	}
	return nil
}

func (e MemberType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Method string

const (
	MethodAdd Method = "ADD"
	MethodDel Method = "DEL"
)

var AllMethod = []Method{
	MethodAdd,
	MethodDel,
}

func (e Method) IsValid() bool {
	switch e {
	case MethodAdd, MethodDel:
		return true
	}
	return false
}

func (e Method) String() string {
	return string(e)
}

func (e Method) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	e = Method(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Method", str)
	}
	return nil
}

func (e Method) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OperationType string

const (
	OperationTypeSearch    OperationType = "SEARCH"
	OperationTypeQuote     OperationType = "QUOTE"
	OperationTypeBook      OperationType = "BOOK"
	OperationTypeCancel    OperationType = "CANCEL"
	OperationTypeScheduler OperationType = "SCHEDULER"
	OperationTypeCreate    OperationType = "CREATE"
	OperationTypeRead      OperationType = "READ"
	OperationTypeUpdate    OperationType = "UPDATE"
	OperationTypeDelete    OperationType = "DELETE"
	OperationTypeExecute   OperationType = "EXECUTE"
	OperationTypeOther     OperationType = "OTHER"
)

var AllOperationType = []OperationType{
	OperationTypeSearch,
	OperationTypeQuote,
	OperationTypeBook,
	OperationTypeCancel,
	OperationTypeScheduler,
	OperationTypeCreate,
	OperationTypeRead,
	OperationTypeUpdate,
	OperationTypeDelete,
	OperationTypeExecute,
	OperationTypeOther,
}

func (e OperationType) IsValid() bool {
	switch e {
	case OperationTypeSearch, OperationTypeQuote, OperationTypeBook, OperationTypeCancel, OperationTypeScheduler, OperationTypeCreate, OperationTypeRead, OperationTypeUpdate, OperationTypeDelete, OperationTypeExecute, OperationTypeOther:
		return true
	}
	return false
}

func (e OperationType) String() string {
	return string(e)
}

func (e OperationType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	e = OperationType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OperationType", str)
	}
	return nil
}

func (e OperationType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OrganizationTemplate string

const (
	OrganizationTemplateOrganizationDefault OrganizationTemplate = "ORGANIZATION_DEFAULT"
)

var AllOrganizationTemplate = []OrganizationTemplate{
	OrganizationTemplateOrganizationDefault,
}

func (e OrganizationTemplate) IsValid() bool {
	switch e {
	case OrganizationTemplateOrganizationDefault:
		return true
	}
	return false
}

func (e OrganizationTemplate) String() string {
	return string(e)
}

func (e OrganizationTemplate) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	e = OrganizationTemplate(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrganizationTemplate", str)
	}
	return nil
}

func (e OrganizationTemplate) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type RateRulesType string

const (
	RateRulesTypePackage          RateRulesType = "PACKAGE"
	RateRulesTypeOlder55          RateRulesType = "OLDER55"
	RateRulesTypeOlder60          RateRulesType = "OLDER60"
	RateRulesTypeOlder65          RateRulesType = "OLDER65"
	RateRulesTypeCanaryResident   RateRulesType = "CANARY_RESIDENT"
	RateRulesTypeBalearicResident RateRulesType = "BALEARIC_RESIDENT"
	RateRulesTypeLargeFamily      RateRulesType = "LARGE_FAMILY"
	RateRulesTypeHoneymoon        RateRulesType = "HONEYMOON"
	RateRulesTypePublicServant    RateRulesType = "PUBLIC_SERVANT"
	RateRulesTypeUnemployed       RateRulesType = "UNEMPLOYED"
	RateRulesTypeNormal           RateRulesType = "NORMAL"
	RateRulesTypeNonRefundable    RateRulesType = "NON_REFUNDABLE"
)

var AllRateRulesType = []RateRulesType{
	RateRulesTypePackage,
	RateRulesTypeOlder55,
	RateRulesTypeOlder60,
	RateRulesTypeOlder65,
	RateRulesTypeCanaryResident,
	RateRulesTypeBalearicResident,
	RateRulesTypeLargeFamily,
	RateRulesTypeHoneymoon,
	RateRulesTypePublicServant,
	RateRulesTypeUnemployed,
	RateRulesTypeNormal,
	RateRulesTypeNonRefundable,
}

func (e RateRulesType) IsValid() bool {
	switch e {
	case RateRulesTypePackage, RateRulesTypeOlder55, RateRulesTypeOlder60, RateRulesTypeOlder65, RateRulesTypeCanaryResident, RateRulesTypeBalearicResident, RateRulesTypeLargeFamily, RateRulesTypeHoneymoon, RateRulesTypePublicServant, RateRulesTypeUnemployed, RateRulesTypeNormal, RateRulesTypeNonRefundable:
		return true
	}
	return false
}

func (e RateRulesType) String() string {
	return string(e)
}

func (e RateRulesType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	e = RateRulesType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RateRulesType", str)
	}
	return nil
}

func (e RateRulesType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type RoleType string

const (
	RoleTypeViewer   RoleType = "VIEWER"
	RoleTypeEditor   RoleType = "EDITOR"
	RoleTypeAdmin    RoleType = "ADMIN"
	RoleTypeExecutor RoleType = "EXECUTOR"
	RoleTypeSpecific RoleType = "SPECIFIC"
)

var AllRoleType = []RoleType{
	RoleTypeViewer,
	RoleTypeEditor,
	RoleTypeAdmin,
	RoleTypeExecutor,
	RoleTypeSpecific,
}

func (e RoleType) IsValid() bool {
	switch e {
	case RoleTypeViewer, RoleTypeEditor, RoleTypeAdmin, RoleTypeExecutor, RoleTypeSpecific:
		return true
	}
	return false
}

func (e RoleType) String() string {
	return string(e)
}

func (e RoleType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	e = RoleType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RoleType", str)
	}
	return nil
}

func (e RoleType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
